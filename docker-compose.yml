version: '3.8'

services:
  sqlfliteDuckdb:
    image: voltrondata/sqlflite:latest
    container_name: sqlfliteDuckdb
    restart: no  # Ensures the container is removed after stopping, similar to --rm
    init: true
    tty: true
    privileged: true
    ports:
      - "31337:31337"
    networks:
      - lingodb
    environment:
      TLS_ENABLED: "0"
      SQLFLITE_PASSWORD: "sqlflite_password"
      DATABASE_FILENAME: "/opt/sqlflite/data/tpch_sf20.duckdb"
      DATABASE_BACKEND: "duckdb"
    pull_policy: missing  # Ensures the image is pulled if missing
    volumes:
      - /home/mor/tpch/tpch_sf20.duckdb:/opt/sqlflite/data/tpch_sf20.duckdb  # Bind the specific file
  sqlfliteSqlite:
    image: voltrondata/sqlflite:latest
    container_name: sqlfliteSqlite
    restart: no  # Ensures the container is removed after stopping, similar to --rm
    init: true
    tty: true
    privileged: true
    ports:
      - "31337:31337"
    networks:
      - lingodb
    environment:
      TLS_ENABLED: "0"
      SQLFLITE_PASSWORD: "sqlflite_password"
      DATABASE_FILENAME: "/opt/sqlflite/data/TPC-H-20.db"
      DATABASE_BACKEND: sqlite
    pull_policy: missing  # Ensures the image is pulled if missing
    volumes:
      - /home/mor/tpch/TPC-H-20.db:/opt/sqlflite/data/TPC-H-20.db  # Bind the specific file



  mariadb:
    image: mariadb:11.7.2
    restart: always
    container_name: mariadb
    environment:
      MARIADB_ROOT_PASSWORD: password

  simpleSQLServer:
    image: simple_server
    build:
      context: ./simple_flight_sql_server
      dockerfile: Dockerfile
    container_name: simpleSQLServer
    stdin_open: true
    tty: true
    privileged: true
    networks:
      - lingodb
    ports:
      - "8083:8083"
  # lingodb_server:
  #   image: lingodb_server 
  #   build:
  #     context: /home/mor/projects/tmp2
  #     dockerfile: Dockerfile
  #   container_name: lingodb_server
  #   stdin_open: true
  #   tty: true
  #   privileged: true
  #   networks:
  #     - lingodb

  #   volumes:
  #     - /home/mor/projects/lingo-db/resources/data/tpch:/database
  #   ports:
  #     - "8083:8083"
  simple_odbc_client:
    image: cpp_odbc_client
    build:
      context: ./cpp_odbc
      dockerfile: Dockerfile
    container_name: cpp_odbc_client
    privileged: true
    stdin_open: true
    tty: true
    networks:
      - lingodb
    environment:
      DLS: "ArrowSqflite"
      TYPE: "0"
  odbc_simple_server:
    image: cpp_odbc_client
    build:
      context: ./cpp_odbc
      dockerfile: Dockerfile
    container_name: odbc_simple_server
    privileged: true
    stdin_open: true
    tty: true
    networks:
      - lingodb
    environment:
      DLS: DRIVER=ArrowDriver;HOST=simpleSQLServer;PORT=8083;useEncryption=false
      TYPE: "1"
  odbc_sqlflite_duckdb:
    image: cpp_odbc_client
    build:
      context: ./cpp_odbc
      dockerfile: Dockerfile
    container_name: odbc_sqlflite_duckdb
    privileged: true
    stdin_open: true
    tty: true
    networks:
      - lingodb
    environment:
      DLS: DRIVER=ArrowDriver;HOST=sqlfliteDuckdb;PORT=31337;useEncryption=false;UID=sqlflite_username;PWD=sqlflite_password
      TYPE: "0"
  odbc_duckdb:
    image: cpp_odbc_client
    build:
      context: ./cpp_odbc
      dockerfile: Dockerfile
    container_name: odbc_duckdb
    privileged: true
    stdin_open: true
    tty: true
    networks:
      - lingodb
    volumes: 
      - /home/mor/tpch:/database
    environment:
      DLS: DRIVER={DuckDB Driver};DATABASE=/database/tpch_sf20.duckdb
      TYPE: "0"

  odbc_sqllite_client:
    image: cpp_odbc_client
    build:
      context: ./cpp_odbc
      dockerfile: Dockerfile
    container_name: odbc_sqllite_client
    privileged: true
    stdin_open: true
    tty: true
    networks:
      - lingodb
    environment:
      DLS: "SQLITEODBC"
      TYPE: "0"
  #simple_jdbc_timing_client:
   # image: simple_jdbc_timing_client
    #build:
     # context: /home/mor/projects/simple_timing
      #dockerfile: Dockerfile
    #container_name: simple_jdbc_timing_client
    #privileged: true
    #stdin_open: true
    #tty: true
    #networks:
     # - lingodb
    #volumes:
     # - /home/mor/tpch:/database
  jdbc_timing_client_duckdb:
    image: jdbc_timing_client
    build:
      context: ./java_jdbc
      dockerfile: Dockerfile
    container_name: jdbc_timing_client_duckdb
    privileged: true
    stdin_open: true
    tty: true
    networks:
      - lingodb
    volumes:
      - /home/mor/tpch:/database
    environment:
      JDBC_URL: jdbc:duckdb:/database/tpch_sf20.duckdb
  jdbc_timing_client_sqlite:
    image: jdbc_timing_client
    build:
      context: ./java_jdbc
      dockerfile: Dockerfile
    container_name: jdbc_timing_client_sqlite
    privileged: true
    stdin_open: true
    tty: true
    networks:
      - lingodb
    volumes:
      - /home/mor/tpch/TPC-H-20.db:/database/TPC-H-20.db
    environment:
      JDBC_URL: jdbc:sqlite:/database/TPC-H-20.db
  jdbc_timing_client_sqlflite:
    image: jdbc_timing_client
    build:
      context: ./java_jdbc
      dockerfile: Dockerfile
    container_name: jdbc_timing_client_sqlflite

    privileged: true
    stdin_open: true
    tty: true
    networks:
      - lingodb
    environment:
      JDBC_URL: jdbc:arrow-flight-sql://sqlfliteDuckdb:31337?useEncryption=false&user=sqlflite_username&password=sqlflite_password&disableCertificateVerification=true
  jdbc_timing_client_simple_server:
    image: jdbc_timing_client
    build:
      context: ./java_jdbc
      dockerfile: Dockerfile
    container_name: jdbc_timing_client_simple_server
    privileged: true
    stdin_open: true
    tty: true
    networks:
      - lingodb
    environment:
      JDBC_URL: jdbc:arrow-flight-sql://simpleSQLServer:8083?useEncryption=false

  
  #adbc
  adbc_timing_client_sqlflite:
    image: adbc_timing_client
    build:
      context: ./java_adbc
      dockerfile: Dockerfile
    container_name: adbc_timing_client_sqlflite
    privileged: true
    stdin_open: true
    tty: true
    networks:
      - lingodb
    environment:
      JDBC_URL: jdbc:arrow-flight-sql://simpleSQLServer:8083?useEncryption=false
networks:
  lingodb:
    external: true
